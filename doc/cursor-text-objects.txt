*cursor-text-objects.txt*   For Neovim >= 0.8.0  Last change: 2024 November 23

==============================================================================
Table of Contents                      *cursor-text-objects-table-of-contents*

1. cursor-text-objects.nvim     |cursor-text-objects-cursor-text-objects.nvim|
2. How To Use                                 |cursor-text-objects-how-to-use|
  - Summary                           |cursor-text-objects-how-to-use-summary|
  - Details                           |cursor-text-objects-how-to-use-details|
3. Installation                             |cursor-text-objects-installation|
4. Tests                                           |cursor-text-objects-tests|
  - Initialization                  |cursor-text-objects-tests-initialization|
  - Running                                |cursor-text-objects-tests-running|
5. Tracking Updates                     |cursor-text-objects-tracking-updates|
6. Other Plugins                           |cursor-text-objects-other-plugins|

==============================================================================
1. cursor-text-objects.nvim     *cursor-text-objects-cursor-text-objects.nvim*

  --------------------------------------------------------------------------------
            
  --------- ----------------------------------------------------------------------
  Build     [unittests] [documentation] [luacheck] [llscheck] [stylua]
  Status    [urlchecker]

  License   [License-MIT]

  Social    [RSS]
  --------------------------------------------------------------------------------

==============================================================================
2. How To Use                                 *cursor-text-objects-how-to-use*


SUMMARY                               *cursor-text-objects-how-to-use-summary*

In short, mappings like `dap`, which delete a whole paragraph, now can use
`d[ap` which means "delete from the start of the paragraph to your current
cursor position" and `d]ap` means "delete from the current cursor position to
the end of the paragraph".

It works with any text operator or text object pair and integrates with
existing plugins.


DETAILS                               *cursor-text-objects-how-to-use-details*

For every text object and text operator that Vim has, you can now "include"
your cursor as a part of the command.

Here’s a practical example. Have you ever had a paragraph of text like this.

>
    Some text with many lines. And something
    that wraps multiple|cursor here| lines in a single sentence.
    Lorem ipsum and all that.
    
    More paragraph text
<

And you’d like delete just from your current `|cursor|` to the bottom of the
paragraph? You can’t use `dap`, that deletes the whole paragraph. With
cursor-text-objects.nvim, you can use `d]ap` which means "delete from the
current cursor position around the end of the paragraph". And you can delete to
the start of the paragraph with `d[ap`. If you want to delete to the start of
the sentence, use `d[is`.

Again, **any text operator or text object** command that you can think of now
works with your cursor. Here’s more examples.

- `d[a}` - Delete around the start of a {}-pair to the cursor.
- `d]a}` - Delete around the cursor to the end of a {}-pair.
- `gc[ip` - Comment from the start of the paragraph to the cursor.
- `gc]ip` - Comment from the cursor to the end of the paragraph.
- `gw[ip` - Format from the start of the paragraph to the cursor.
- `gw]ip` - Format from the cursor to the end of the paragraph.
- `v[ip` - Select from the start of the paragraph to the cursor.
- `v]ip` - Select from the cursor to the end of the paragraph.
- `y[ib` - Yank inside start of a ()-pair to the cursor.
- `y]ib` - Yank inside the cursor to the end of a ()-pair.

It works with custom operators and objects too!

Using nvim-treesitter-textobjects
<https://github.com/nvim-treesitter/nvim-treesitter-textobjects>

- `v]ic` - Select lines from the cursor to the end of a class.
- `v[ic` - Select lines from the start of a class to the cursor.
- `v]if` - Select lines from the cursor to the end of a function.
- `v[if` - Select lines from the start of a function to the cursor.

Using vim-textobj-indent <https://github.com/kana/vim-textobj-indent>

- `c[ii` - Change from start of the indented-lines to the cursor.
- `c]ii` - Change from the cursor to the end of the indented-lines.

etc. etc. etc.

Give your right-pinky a workout and install `cursor-text-objects.nvim` today!


==============================================================================
3. Installation                             *cursor-text-objects-installation*

- lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
        "ColinKennedy/cursor-text-objects.nvim",
        config = function()
            vim.keymap.set(
                {"o", "x"},
                "[",
                "<Plug>(cursor-text-objects-up)",
                { desc = "Run from your current cursor to the end of the text-object." }
            )
            vim.keymap.set(
                {"o", "x"},
                "]",
                "<Plug>(cursor-text-objects-down)",
                { desc = "Run from your current cursor to the end of the text-object." }
            )
        end,
        version = "v1.*",
    }
<


==============================================================================
4. Tests                                           *cursor-text-objects-tests*


INITIALIZATION                      *cursor-text-objects-tests-initialization*

Run this line once before calling any `busted` command

>sh
    eval $(luarocks path --lua-version 5.1 --bin)
<


RUNNING                                    *cursor-text-objects-tests-running*

Run all tests

>sh
    luarocks test --test-type busted
    # Or manually
    busted --helper spec/minimal_init.lua .
    # Or with Make
    make test
<

Run test based on tags

>sh
    busted --helper spec/minimal_init.lua . --tags=simple
<


==============================================================================
5. Tracking Updates                     *cursor-text-objects-tracking-updates*

See doc/news.txt <doc/news.txt> for updates.

You can watch this plugin for changes by adding this URL to your RSS feed:

>
    https://github.com/ColinKennedy/cursor-text-objects.nvim/commits/main/doc/news.txt.atom
<


==============================================================================
6. Other Plugins                           *cursor-text-objects-other-plugins*

This plugin is a sort-of successor to vim-ninja-feet
<https://github.com/tommcdo/vim-ninja-feet> with some notable differences

- visual mode support
- better edge-case handling
- (IMO) better documenting what the code does / how it works

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
